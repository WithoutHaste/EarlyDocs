using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Compare
{
	/// <summary>
	/// Foreach target framework test project,
	/// compare the output of the test project to the oracle documentation.
	/// 
	/// Outputs one line per file that matches perfectly, and any differences for files that don't match.
	/// </summary>
	public static class Compare
	{
		static void Main(string[] args)
		{
			string autoGeneratedFolder = GetAutoGeneratedDirectory();

			foreach(string netFolder in Directory.GetDirectories(autoGeneratedFolder))
			{
				CompareFiles(netFolder);
			}

			Console.WriteLine("Done");
			Console.ReadLine();
		}

		private static void CompareFiles(string folder)
		{
			Console.WriteLine("======================================");
			Console.WriteLine(folder);

			string netVersion = new DirectoryInfo(folder).Name;

			string testDocs = Path.Combine(folder, "documentation");
			string oracleDocs = Path.Combine(folder, "oracleDocumentation35");
			if(netVersion == "net20" || netVersion == "net30")
			{
				oracleDocs = Path.Combine(folder, "oracleDocumentation20");
			}

			List<string> oracleFileNames = new List<string>();

			foreach(string fileName in Directory.GetFiles(oracleDocs))
			{
				string name = Path.GetFileName(fileName);
				oracleFileNames.Add(name);
				CompareText(oracleDocs, testDocs, name);
			}

			foreach(string fileName in Directory.GetFiles(testDocs))
			{
				string name = Path.GetFileName(fileName);
				if(!oracleFileNames.Contains(name))
				{
					Console.WriteLine("UNKNOWN FILE: " + name);
				}
			}
		}

		private static void CompareText(string oracleFolder, string testFolder, string fileName)
		{
			string[] oracleText = File.ReadAllLines(Path.Combine(oracleFolder, fileName));
			string[] testText = File.ReadAllLines(Path.Combine(testFolder, fileName));

			List<string> differences = new List<string>();
			int i = 0;
			while(i < oracleText.Length)
			{
				if(i >= testText.Length)
					differences.Add(String.Format("ORACLE: {0} != TEST: NULL", oracleText[i]));
				else if(oracleText[i] != testText[i])
					differences.Add(String.Format("ORACLE: {0} != TEST: {1}", oracleText[i], testText[i]));
				i++;
			}
			while(i < testText.Length)
			{
				differences.Add(String.Format("ORACLE: NULL != TEST: {0}", testText[i]));
				i++;
			}

			if(differences.Count == 0)
				Console.WriteLine(fileName + " OK");
			else
				Console.WriteLine("{0} NO MATCH\n{1}", fileName, String.Join("\n\t", differences));
		}

		private static string GetAutoGeneratedDirectory()
		{
			string dir = Environment.CurrentDirectory;

			while(dir.EndsWith("EarlyDocs"))
			{
				dir = Directory.GetParent(dir).FullName;
			}
			if(dir.EndsWith("GitHub"))
			{
				return Path.Combine(dir, "EarlyDocs", "InstallationTests", "AutoGenerated");
			}

			while(!dir.EndsWith("InstallationTests"))
			{
				dir = Directory.GetParent(dir).FullName;
			}
			return Path.Combine(dir, "AutoGenerated");
		}
	}
}
