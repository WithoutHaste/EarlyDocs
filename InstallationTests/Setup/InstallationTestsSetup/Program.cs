using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;

namespace InstallationTestsSetup
{
	class Program
	{
		static void Main(string[] args)
		{
			//delete any old auto-generated installation tests
			string setupFolder = Path.Combine(GetInstallationTestsDirectory(), "Setup");
			string earlyDocsFolder = Path.Combine(GetInstallationTestsDirectory(), "..", "EarlyDocs");
			string templateFolder = Path.Combine(GetInstallationTestsDirectory(), "..", "Test");
			string autoGeneratedFolder = Path.Combine(GetInstallationTestsDirectory(), "AutoGenerated");
			foreach(string oldFolder in Directory.EnumerateDirectories(autoGeneratedFolder))
			{
				Directory.Delete(oldFolder, recursive: true);
			}
			foreach(string file in Directory.GetFiles(autoGeneratedFolder))
			{
				File.Delete(file);
			}
			File.Copy(Path.Combine(earlyDocsFolder, "..", "MultiTargetSymbols.targets"), Path.Combine(autoGeneratedFolder, "MultiTargetSymbols.targets"));

			Dictionary<string, string> frameworks = new Dictionary<string, string>() {
				{ "v2.0",   "net20" },
				{ "v3.0",   "net30" },
				{ "v3.5",   "net35" },
				{ "v4.0",   "net40" },
				{ "v4.5",   "net45" },
				{ "v4.5.1", "net451" },
				{ "v4.5.2", "net452" },
				{ "v4.6",   "net46" },
				{ "v4.6.1", "net461" },
				{ "v4.6.2", "net462" },
				{ "v4.7",   "net47" },
				{ "v4.7.1", "net471" },
				{ "v4.7.2", "net472" },
			};

			foreach(KeyValuePair<string, string> pair in frameworks)
			{
				string version = pair.Key;
				string net = pair.Value;

				//create a folder
				string destination = Path.Combine(autoGeneratedFolder, net);
				Directory.CreateDirectory(destination);

				//copy Template project without any NuGet references
				//do not copy any NuGet information, so those files can be installed in the test
				File.Copy(Path.Combine(setupFolder, "Template.sln"), Path.Combine(destination, "Test.sln"));
				File.Copy(Path.Combine(templateFolder, "Test." + net + ".csproj"), Path.Combine(destination, "Test.csproj"));

				CopyAllFromDirectory(templateFolder, destination);

				//update project to current target framework
				string csprojPath = Path.Combine(autoGeneratedFolder, net, "Test.csproj");
				XmlDocument doc = new XmlDocument();
				doc.Load(csprojPath);
				//standardize assembly name
				XmlNode assemblyNameNode = doc.GetElementsByTagName("AssemblyName")[0];
				assemblyNameNode.InnerText = "Test";
				//replace target framework
				XmlNode frameworkNode = doc.GetElementsByTagName("TargetFrameworkVersion")[0];
				frameworkNode.InnerText = version;
				//remove NuGet references
				List<XmlNode> referenceNodes = new List<XmlNode>(doc.GetElementsByTagName("Reference").Cast<XmlNode>());
				foreach(XmlNode referenceNode in referenceNodes)
				{
					string include = (referenceNode as XmlElement).GetAttribute("Include");
					if(include.StartsWith("LINQlone"))
					{
						referenceNode.ParentNode.RemoveChild(referenceNode);
					}
				}
				//save changes
				doc.Save(csprojPath);
			}
		}

		/// <summary>
		/// Copies all files and nested directories from one directory to another.
		/// </summary>
		/// <remarks>
		/// Exludes file types: .csproj, .config
		/// Exluces unneccessary folders.
		/// </remarks>
		private static void CopyAllFromDirectory(string fromDirectory, string toDirectory)
		{
			string[] ignoreExtensions = new string[] { ".csproj", ".config" };
			string[] ignoreFolders = new string[] { "bin", "documentation", "obj" };

			Directory.CreateDirectory(toDirectory);

			foreach(string file in Directory.GetFiles(fromDirectory))
			{
				if(ignoreExtensions.Contains(Path.GetExtension(file)))
					continue;
				File.Copy(file, Path.Combine(toDirectory, Path.GetFileName(file)));
			}

			foreach(string directory in Directory.GetDirectories(fromDirectory))
			{
				if(ignoreFolders.Contains(Path.GetFileName(directory)))
					continue;
				CopyAllFromDirectory(directory, Path.Combine(toDirectory, Path.GetFileName(directory)));
			}
		}

		private static string GetInstallationTestsDirectory()
		{
			string dir = Environment.CurrentDirectory;

			while(dir.EndsWith("EarlyDocs")) //might be starting from EarlyDocs
			{
				dir = Directory.GetParent(dir).FullName;
			}
			if(dir.EndsWith("GitHub"))
			{
				dir = Path.Combine(dir, "EarlyDocs", "InstallationTests");
				return dir;
			}

			while(!dir.EndsWith("InstallationTests")) //might be starting from Setup
			{
				dir = Directory.GetParent(dir).FullName;
			}
			return dir;
		}
	}
}
