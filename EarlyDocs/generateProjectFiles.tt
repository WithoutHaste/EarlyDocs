<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".txt" #>
<#
string modelProjectFileName = this.Host.ResolvePath("EarlyDocs.csproj");
string[] targetFrameworkVersions = new string[] {"v2.0", "v3.0", "v3.5", "v4.0", "v4.5", "v4.5.1", "v4.5.2", "v4.6", "v4.6.1", "v4.6.2", "v4.7", "v4.7.1", "v4.7.2"};

string[] modelLines = LoadFile(modelProjectFileName);

foreach(string version in targetFrameworkVersions) 
{
	string netVersion = version.Replace("v", "net").Replace(".", "");
	GenerateOutput(version, netVersion, modelLines);

	SaveOutput("EarlyDocs." + netVersion + ".csproj");
}

foreach(string version in targetFrameworkVersions) 
{
	string netVersion = version.Replace("v", "net").Replace(".", "");
	WriteLine("msbuild EarlyDocs." + netVersion + ".csproj /P:Configuration=Debug -fl -flp:logfile=logs\\EarlyDocsOutput." + netVersion + ".Debug.log;verbosity=normal");
}
SaveOutput("compileDebugProjects.bat");

foreach(string version in targetFrameworkVersions) 
{
	string netVersion = version.Replace("v", "net").Replace(".", "");
	WriteLine("msbuild EarlyDocs." + netVersion + ".csproj /P:Configuration=Release -fl -flp:logfile=logs\\EarlyDocsOutput." + netVersion + ".Release.log;verbosity=normal");
}
SaveOutput("compileReleaseProjects.bat");
#>

<#+
private void GenerateOutput(string version, string netVersion, string[] lines)
{
	for(int i = 0; i < lines.Length; i++)
	{
		string outputLine = lines[i];
		if(outputLine.Contains("<TargetFrameworkVersion>v2.0</TargetFrameworkVersion>"))
		{
			outputLine = outputLine.Replace("v2.0", version);
		}
		if(outputLine.Contains("<AssemblyName>"))
		{
			outputLine = outputLine.Replace("EarlyDocs", "EarlyDocs." + netVersion);
		}

		if(outputLine.Contains("<HintPath") && outputLine.Contains("DataFiles"))
		{
			outputLine = outputLine.Replace("DataFiles.dll", "DataFiles." + netVersion + ".dll");
		}

		//no generated project should produce its own T4 generated projects
		if(outputLine.Contains("ProjectFiles.tt") || outputLine.Contains("SolutionFiles.tt"))
		{
			i += 3;
			continue;
		}
		if(outputLine.Contains("ProjectFiles.txt") || outputLine.Contains("SolutionFiles.txt"))
		{
			i += 4;
			continue;
		}

		//System.Linq starts with v3.5
		//System.Xml.Linq starts with v3.5
		//System.Core library starts with v3.5
		bool is35OrHigher = (version != "v2.0" && version != "v3.0");
		if(is35OrHigher)
		{
			if(outputLine.Contains("<Reference Include=\"System\""))
			{
				WriteLine(CurrentIndent + "    <Reference Include=\"System.Core\" />"); //System.Core includes namespace System.Linq
			}
			if(outputLine.Contains("<Reference Include=\"LINQlone"))
			{
				i += 3;
				continue;				
			}
			if(outputLine.Contains("<Reference Include=\"System.Xml.Linq"))
			{
				WriteLine(CurrentIndent + "    <Reference Include=\"System.Xml.Linq\" />");
				i += 3;
				continue;				
			}
		}

		WriteLine(CurrentIndent + outputLine);
	}
}
#>

<#+
private string[] LoadFile(string fileName)
{
	return File.ReadLines(fileName).ToArray();
}
#>

<#+
private void SaveOutput(string outputFileName) 
{
	string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	string outputFilePath = Path.Combine(templateDirectory, outputFileName);
	File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>

